function update_dotfiles () {
    cd $HOME/.cdotfiles
    git reset --hard HEAD
    git pull
    git log --oneline main..origin/main
    stow --restow */
    cd -
}

function lg()  {
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}

function r() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function day {
    date +"%a %b %d %Y"
}
alias dzien='day'
  
function bytesConvert {
  if [[ $# -eq 0 ]]
  then
      read -p "Size in bytes: " bytesVal
  else
      bytesVal=$1
  fi
  echo $bytesVal | awk '{ split( "B KB MB GB TB PB EB ZB YB" , v ); s=1; while( $1>1024 && s<9 ){ $1/=1024; s++ } printf "%.2f %s", $1, v[s] }'
}

function fsize() {
  filename=$1
  size="$(wc --bytes $filename)"
  bytesConvert $size
}

function manual() {
    if command -v fzf >/dev/null 2>&1; then
        # If fzf is available, use it for searching
        local page=$(command man -k . | fzf --prompt='Man> ' | awk '{print $1}')
        if [[ -n $page ]]; then
            nvim +"Man $page | only"
        fi
    else
        # If fzf is not available, use the argument directly
        nvim +"Man $1 | only"
    fi
}

function pkill() {
  ps aux | 
  fzf --height 40% \
      --layout=reverse \
      --header-lines=1 \
      --prompt="Select process to kill: " \
      --preview 'echo {}' \
      --preview-window up:3:hidden:wrap \
      --bind 'F2:toggle-preview' |
  awk '{print $2}' |
  xargs -r bash -c '
      if ! kill "$1" 2>/dev/null; then
          echo "Regular kill failed. Attempting with sudo..."
          sudo kill "$1" || echo "Failed to kill process $1" >&2
      fi
  ' --
}

# Copy file with a progress bar
function cpp() {
	if [[ -x "$(command -v rsync)" ]]; then
		# rsync -avh --progress "${1}" "${2}"
		rsync -ah --info=progress2 "${1}" "${2}"
	else
		set -e
		strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
		| awk '{
		count += $NF
		if (count % 10 == 0) {
			percent = count / total_size * 100
			printf "%3d%% [", percent
			for (i=0;i<=percent;i++)
				printf "="
				printf ">"
				for (i=percent;i<100;i++)
					printf " "
					printf "]\r"
				}
			}
		END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
	fi
}

######################
# Pomodoro
######################

source $HOME/.scripts/pomodoro/src/pomodoro-setup.sh

######################
# Themes
######################

function set-yazi-theme {
  $HOME/.cdotfiles/yazi/.config/yazi/theme.sh
}

function set-eza-theme {
  $HOME/.config/eza/theme.sh
}

function set-kitty-theme {
  $HOME/.config/kitty/lib/theme.sh
}

# It's in .aliases
#alias switch-kitty-mode='$HOME/.config/kitty/lib/switcher-light-dark.sh'
function switch-kitty-mode(){

	$HOME/.config/kitty/lib/switcher-light-dark.sh "$@" 
}

#bat cache --build > /dev/null 2>&1 # it's outside to update cache with downloaded custom themes

function set-bat-theme {
    bat cache --build
    sleep 1 && clear
    selTheme=$(bat --list-themes | fzf --preview="bat --theme={} --color=always ~/.zshrc")
    echo $selTheme > $(bat --config-dir)/themes/current_theme
    bat cache --build
    export BAT_THEME=$(< $(bat --config-dir)/themes/current_theme)
    source ~/.zshrc
}

STREAM_ON=true
function stream-mode() {
 
    if [[ $# -eq 0 ]]
    then
        if $STREAM_ON ; then
            echo "Stream mode is now ON"
        else
            echo "Stream mode is now OFF"
        fi

        echo "Use 'stream-mode switch' to change mode."
    else
        if [[ $1 == switch ]]; then
            if $STREAM_ON ; then
                STREAM_ON=false
                echo "Stream mode is changed now to OFF"
                echo $STREAM_ON
            else
                STREAM_ON=true
                echo "Stream mode is changed now ON"
                echo $STREAM_ON
            fi
        else
            echo "Use 'stream-mode switch' to change mode."
        fi
    fi
}

function check-ssh-connection() {

    ss -at '( dport = :22 or sport = :22 )'
}

# Get local IP addresses
if [[ -x "$(command -v ip)" ]]; then
    alias iplocal="ip -br -c a"
else
    alias iplocal="ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
fi

# Get public IP addresses
function ipexternal(){

    if $STREAM_ON ; then
        echo "Stream Mode is ON!!!"
    fi

    echo "Are you sure?[y/n]: "
    read decision

    sleep 1

    if [[ $decision == "y" ]] ; then
        if $STREAM_ON ; then
            echo "If you are streaming, I just saved you!!!"
        else
            if [[ -x "$(command -v curl)" ]]; then
                curl -s ifconfig.me && echo
            elif [[ -x "$(command -v wget)" ]]; then
                wget -qO- ifconfig.me && echo
            fi
        fi
    fi
}
